head_func(index, head_len)
scale(data_avg[,2])
min(samp[,index])
max(samp[,index])
denormalize = function(vec, min, max)
{
vec = scale(vec
return(vec * (max - min) + min)
}
normalize = function(vec, min, max)
{
vec = scale(vec)
return((vec - min)/(max - min))
}
denormalize = function(vec, min, max)
{
vec = scale(vec)
return(vec * (max - min) + min)
}
normalize = function(vec, min, max)
{
vec = scale(vec)
return((vec - min)/(max - min))
}
data_avg[,index] = normalize(data_avg[,index], min(samp[,index]), max(samp[,index]))
### 2      frequency
index = 2
summary_func(index)
head_func(index, head_len)
data_avg[,index]
summary()
summary(data_avg[,index])
denormalize = function(vec, min, max)
{
vec = vec + min(vec) + 1
return(vec * (max - min) + min)
}
normalize = function(vec, min, max)
{
vec = vec + min(vec) + 1
return((vec - min)/(max - min))
}
### 2      frequency
index = 2
summary_func(index)
head_func(index, head_len)
data_avg[,index] = normalize(data_avg[,index], min(samp[,index]), max(samp[,index]))
# data = cbind(price_avg, sessionLen_avg, dayOfMonth_avg, dayOfWeek_avg,  deltaPrev_avg,
# deviceAndroid,  deviceDesktop,  deviceIos,     deviceMobile,    deviceUnknown,
# hourOfDay_avg , numDivisions_avg,   numInteractions_avg,    numItemsViewed_avg, numSessions,    recency)
data_avg = read.csv("churn_avg.csv")
samp = read.csv("sample.csv")
samp_avg = read.csv("sample_avg.csv")
# summary(data_avg)
# summary(samp)
# summary(samp_avg)
# summary(apply(data_avg, 2, as.factor))
# summary(apply(samp, 2, as.factor))
# summary(apply(samp_avg, 2, as.factor))
options(digits = 7)
options(scipen=999)
par(mfrow = c(4, 5))
for (i in 1:18)
{
hist(data_avg[,i], col="gray", main = colnames(data_avg)[i], nclass=100)
}
convert_0_to_1 = function(input_data)
{
input_data = input_data - min(input_data);  input_data[which(input_data>0)] = 1
return(input_data)
}
convert_integer = function(input_data, startNum = 0)
{
uniq = unique(input_data);  len_uniq = length(uniq)
res_vec = seq(startNum, by=1, length=len_uniq)
for(i in 1:len_uniq)    {        input_data[which(input_data==uniq[i])] = res_vec[i];    }
return(input_data)
}
summary_func = function(index)
{
print(rbind(summary(data_avg[,index]), summary(samp[,index]), summary(samp_avg[,index])))
}
head_func = function(index, len)
{
print(rbind(head(data_avg[,index], len), head(samp[,index], len), head(samp_avg[,index], len)))
}
denormalize = function(vec, min, max)
{
vec = vec + min(vec) + 1
return(vec * (max - min) + min)
}
normalize = function(vec, min, max)
{
vec = vec + min(vec) + 1
return((vec - min)/(max - min))
}
head_len = 20
## 1      X
index = 1
summary_func(index)
head_func(index, head_len)
normalize(data_avg[,index], min(samp[,index]), max(samp[,index]))
### 2      frequency
index = 2
summary_func(index)
head_func(index, head_len)
data_avg[,index] = normalize(data_avg[,index], min(samp[,index]), max(samp[,index]))
### 2      frequency
index = 2
summary_func(index)
head_func(index, head_len)
### 2      frequency
index = 2
summary_func(index)
head_func(index, head_len)
a = data_avg[,index]
sotr(a)
sort(a)
which(sort(a))
which(a == sort(a))
sort(a, index.return=TRUE)$ix
?seq
seq(from=1, to=10, length=100)
normalize = function(vec, min, max)
{
index = sort(vec, index.return=TRUE)$ix
new = seq(from=min, to=max, length=vec)
return(new[index])
}
data_avg[,index] = normalize(data_avg[,index], min(samp[,index]), max(samp[,index]))
data_avg[,index]
### 2      frequency
index = 2
summary_func(index)
head_func(index, head_len)
# data = cbind(price_avg, sessionLen_avg, dayOfMonth_avg, dayOfWeek_avg,  deltaPrev_avg,
# deviceAndroid,  deviceDesktop,  deviceIos,     deviceMobile,    deviceUnknown,
# hourOfDay_avg , numDivisions_avg,   numInteractions_avg,    numItemsViewed_avg, numSessions,    recency)
data_avg = read.csv("churn_avg.csv")
samp = read.csv("sample.csv")
samp_avg = read.csv("sample_avg.csv")
# summary(data_avg)
# summary(samp)
# summary(samp_avg)
# summary(apply(data_avg, 2, as.factor))
# summary(apply(samp, 2, as.factor))
# summary(apply(samp_avg, 2, as.factor))
options(digits = 7)
options(scipen=999)
par(mfrow = c(4, 5))
for (i in 1:18)
{
hist(data_avg[,i], col="gray", main = colnames(data_avg)[i], nclass=100)
}
convert_0_to_1 = function(input_data)
{
input_data = input_data - min(input_data);  input_data[which(input_data>0)] = 1
return(input_data)
}
convert_integer = function(input_data, startNum = 0)
{
uniq = unique(input_data);  len_uniq = length(uniq)
res_vec = seq(startNum, by=1, length=len_uniq)
for(i in 1:len_uniq)    {        input_data[which(input_data==uniq[i])] = res_vec[i];    }
return(input_data)
}
summary_func = function(index)
{
print(rbind(summary(data_avg[,index]), summary(samp[,index]), summary(samp_avg[,index])))
}
head_func = function(index, len)
{
print(rbind(head(data_avg[,index], len), head(samp[,index], len), head(samp_avg[,index], len)))
}
normalize = function(vec, min, max)
{
index = sort(vec, index.return=TRUE)$ix
new = seq(from=min, to=max, length=vec)
return(new[index])
}
head_len = 20
## 1      X
index = 1
summary_func(index)
head_func(index, head_len)
### 2      frequency
index = 2
summary_func(index)
head_func(index, head_len)
data_avg[,index] = normalize(data_avg[,index], min(samp[,index]), max(samp[,index]))
normalize = function(vec, min, max)
{
index = sort(vec, index.return=TRUE)$ix
new = seq(from=min, to=max, length=length(vec))
return(new[index])
}
## 1      X
index = 1
summary_func(index)
head_func(index, head_len)
### 2      frequency
index = 2
summary_func(index)
head_func(index, head_len)
data_avg[,index] = normalize(data_avg[,index], min(samp[,index]), max(samp[,index]))
# data = cbind(price_avg, sessionLen_avg, dayOfMonth_avg, dayOfWeek_avg,  deltaPrev_avg,
# deviceAndroid,  deviceDesktop,  deviceIos,     deviceMobile,    deviceUnknown,
# hourOfDay_avg , numDivisions_avg,   numInteractions_avg,    numItemsViewed_avg, numSessions,    recency)
data_avg = read.csv("churn_avg.csv")
samp = read.csv("sample.csv")
samp_avg = read.csv("sample_avg.csv")
# summary(data_avg)
# summary(samp)
# summary(samp_avg)
# summary(apply(data_avg, 2, as.factor))
# summary(apply(samp, 2, as.factor))
# summary(apply(samp_avg, 2, as.factor))
options(digits = 7)
options(scipen=999)
par(mfrow = c(4, 5))
for (i in 1:18)
{
hist(data_avg[,i], col="gray", main = colnames(data_avg)[i], nclass=100)
}
convert_0_to_1 = function(input_data)
{
input_data = input_data - min(input_data);  input_data[which(input_data>0)] = 1
return(input_data)
}
convert_integer = function(input_data, startNum = 0)
{
uniq = unique(input_data);  len_uniq = length(uniq)
res_vec = seq(startNum, by=1, length=len_uniq)
for(i in 1:len_uniq)    {        input_data[which(input_data==uniq[i])] = res_vec[i];    }
return(input_data)
}
summary_func = function(index)
{
print(rbind(summary(data_avg[,index]), summary(samp[,index]), summary(samp_avg[,index])))
}
head_func = function(index, len)
{
print(rbind(head(data_avg[,index], len), head(samp[,index], len), head(samp_avg[,index], len)))
}
normalize = function(vec, min, max)
{
index = sort(vec, index.return=TRUE)$ix
new = seq(from=min, to=max, length=length(vec))
return(new[index])
}
head_len = 20
## 1      X
index = 1
summary_func(index)
head_func(index, head_len)
### 2      frequency
index = 2
summary_func(index)
head_func(index, head_len)
data_avg[,index] = normalize(data_avg[,index], min(samp[,index]), max(samp[,index]))
### 2      frequency
index = 2
summary_func(index)
head_func(index, head_len)
## 3      noSessions
index = 3
summary_func(index)
head_func(index, head_len)
data_avg[,index] = data_avg[,index] - min(data_avg[,index])
data_avg[,index] = convert_integer(data_avg[,index])
## 3      noSessions
index = 3
summary_func(index)
head_func(index, head_len)
## 3      noSessions
index = 3
summary_func(index)
head_func(index, head_len)
data_avg[,index] = data_avg[,index] - min(data_avg[,index])
data_avg[,index] = convert_integer(data_avg[,index])
## 3      noSessions
index = 3
summary_func(index)
head_func(index, head_len)
## 3      noSessions
index = 3
summary_func(index)
head_func(index, head_len)
## 3      noSessions
index = 3
summary_func(index)
head_func(index, head_len)
data_avg[,index] = data_avg[,index] - min(data_avg[,index])
data_avg[,index] = convert_integer(data_avg[,index], 1)
## 3      noSessions
index = 3
summary_func(index)
head_func(index, head_len)
# data = cbind(price_avg, sessionLen_avg, dayOfMonth_avg, dayOfWeek_avg,  deltaPrev_avg,
# deviceAndroid,  deviceDesktop,  deviceIos,     deviceMobile,    deviceUnknown,
# hourOfDay_avg , numDivisions_avg,   numInteractions_avg,    numItemsViewed_avg, numSessions,    recency)
data_avg = read.csv("churn_avg.csv")
samp = read.csv("sample.csv")
samp_avg = read.csv("sample_avg.csv")
# summary(data_avg)
# summary(samp)
# summary(samp_avg)
# summary(apply(data_avg, 2, as.factor))
# summary(apply(samp, 2, as.factor))
# summary(apply(samp_avg, 2, as.factor))
options(digits = 7)
options(scipen=999)
par(mfrow = c(4, 5))
for (i in 1:18)
{
hist(data_avg[,i], col="gray", main = colnames(data_avg)[i], nclass=100)
}
convert_0_to_1 = function(input_data)
{
input_data = input_data - min(input_data);  input_data[which(input_data>0)] = 1
return(input_data)
}
convert_integer = function(input_data, startNum = 0)
{
uniq = unique(input_data);  len_uniq = length(uniq)
res_vec = seq(startNum, by=1, length=len_uniq)
for(i in 1:len_uniq)    {        input_data[which(input_data==uniq[i])] = res_vec[i];    }
return(input_data)
}
summary_func = function(index)
{
print(rbind(summary(data_avg[,index]), summary(samp[,index]), summary(samp_avg[,index])))
}
head_func = function(index, len)
{
print(rbind(head(data_avg[,index], len), head(samp[,index], len), head(samp_avg[,index], len)))
}
normalize = function(vec, min, max)
{
index = sort(vec, index.return=TRUE)$ix
new = seq(from=min, to=max, length=length(vec))
return(new[index])
}
head_len = 20
## 1      X
index = 1
summary_func(index)
head_func(index, head_len)
### 2      frequency
index = 2
summary_func(index)
head_func(index, head_len)
data_avg[,index] = normalize(data_avg[,index], min(samp[,index]), max(samp[,index]))
### 2      frequency
index = 2
summary_func(index)
head_func(index, head_len)
### 2      frequency
index = 2
summary_func(index)
head_func(index, head_len)
## 3      noSessions
index = 3
summary_func(index)
head_func(index, head_len)
data_avg[,index] = data_avg[,index] - min(data_avg[,index])
data_avg[,index] = convert_integer(data_avg[,index], 1)
## 3      noSessions
index = 3
summary_func(index)
head_func(index, head_len)
### 4      prevGap
index = 4
summary_func(index)
head_func(index, head_len)
### 4      prevGap
index = 4
summary_func(index)
head_func(index, head_len)
data_avg[,index] = normalize(data_avg[,index], min(samp[,index]), max(samp[,index]))
### 4      prevGap
index = 4
summary_func(index)
head_func(index, head_len)
### 5      sessionAvgPrice
index = 5
summary_func(index)
head_func(index, head_len)
data_avg[,index] = normalize(data_avg[,index], min(samp[,index]), max(samp[,index]))
### 5      sessionAvgPrice
index = 5
summary_func(index)
head_func(index, head_len)
## 6      sessionChangeThumbnail
index = 6
summary_func(index)
head_func(index, head_len)
data_avg[,index] = data_avg[,index] - min(data_avg[,index])
data_avg[,index] = convert_integer(data_avg[,index])
## 6      sessionChangeThumbnail
index = 6
summary_func(index)
head_func(index, head_len)
## 7      sessionDevice.android.
index = 7
summary_func(index)
head_func(index, head_len)
data_avg[,index] = convert_0_to_1(data_avg[,index])      #convert_0_to_1
## 8      sessionDevice.desktop.
index = 8
summary_func(index)
head_func(index, head_len)
data_avg[,index] = convert_0_to_1(data_avg[,index])      #convert_0_to_1
## 9      sessionDevice.ios.
index = 9
summary_func(index)
head_func(index, head_len)
data_avg[,index] = convert_0_to_1(data_avg[,index])      #convert_0_to_1
## 10     sessionDevice.mobile.
index = 10
summary_func(index)
head_func(index, head_len)
data_avg[,index] = convert_0_to_1(data_avg[,index])      #convert_0_to_1
## 11     sessionImageZoom
index = 11
summary_func(index)
head_func(index, head_len)
data_avg[,index] = data_avg[,index] - min(data_avg[,index])
data_avg[,index] = convert_integer(data_avg[,index])
## 11     sessionImageZoom
index = 11
summary_func(index)
head_func(index, head_len)
## 12     sessionNDivisions
index = 12
summary_func(index)
head_func(index, head_len)
data_avg[,index] = data_avg[,index] - min(data_avg[,index])
data_avg[,index] = convert_integer(data_avg[,index], 1)
## 12     sessionNDivisions
index = 12
summary_func(index)
head_func(index, head_len)
## 13     sessionView360
index = 13
summary_func(index)
head_func(index, head_len)
data_avg[,index] = data_avg[,index] - min(data_avg[,index])
data_avg[,index] = convert_integer(data_avg[,index])
## 13     sessionView360
index = 13
summary_func(index)
head_func(index, head_len)
## 14     sessionViewonly
index = 14
summary_func(index)
head_func(index, head_len)
data_avg[,index] = data_avg[,index] - min(data_avg[,index])
data_avg[,index] = convert_integer(data_avg[,index], 1)
## 14     sessionViewonly
index = 14
summary_func(index)
head_func(index, head_len)
## 15     sessionWatchVideo
index = 15
summary_func(index)
head_func(index, head_len)
data_avg[,index] = data_avg[,index] - min(data_avg[,index])
data_avg[,index] = convert_integer(data_avg[,index])
## 15     sessionWatchVideo
index = 15
summary_func(index)
head_func(index, head_len)
### 16     twrt
index = 16
summary_func(index)
head_func(index, head_len)
data_avg[,index] = normalize(data_avg[,index], min(samp[,index]), max(samp[,index]))
### 16     twrt
index = 16
summary_func(index)
head_func(index, head_len)
## 17     observed
index = 17
summary_func(index)
head_func(index, head_len)
## 17     observed
index = 17
summary_func(index)
head_func(index, head_len)
### 18     returnTime
index = 18
summary_func(index)
head_func(index, head_len)
data_avg[,index] = normalize(data_avg[,index], min(samp[,index]), max(samp[,index]))
### 18     returnTime
index = 18
summary_func(index)
head_func(index, head_len)
write.csv(data_avg, "churn.csv")
# 38,716 users in the training set and 9,680
data = read.csv("churn.csv")
samp = sample(1:nrow(data), size=38716)
X_train = data[samp,]
data = data[-samp,]
X_test = data[sample(1:nrow(data), size=9680),]
y_train = X_train[,ncol(X_train)]
y_test = X_test[,ncol(X_train)]
write.csv(X_train, "X_train.csv", row.names=FALSE)
write.csv(X_test, "X_test.csv", row.names=FALSE)
write.csv(y_train, "y_train.csv", row.names=FALSE)
write.csv(y_test, "y_test.csv", row.names=FALSE)
